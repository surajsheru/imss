{"version":3,"sources":["logo.svg","firebase/firebase.js","redux/actions/ImActions.js","components/Homepage.js","redux/actions/ImactionTypes.js","components/Cart.js","App.js","serviceWorker.js","redux/reducers/ImReducer.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["module","exports","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","database","ref","firestore","mapActionToProps","getItems","dispatch","on","snapshot","console","log","val","type","payload","connect","state","products","Items","props","useState","id","name","imageUrl","price","cat","useEffect","arr","Object","entries","className","map","key","value","style","width","height","src","alt","Cart","withRouter","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","exact","path","component","Homepage","Boolean","window","location","hostname","match","items","rootReducer","combineReducers","actoin","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c6a11a3c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import * as firebase from 'firebase'\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyCxuKB5H6aKIttwpK1bI4W9mDeozp24DQo\",\r\n    authDomain: \"imss-5c496.firebaseapp.com\",\r\n    databaseURL: \"https://imss-5c496.firebaseio.com\",\r\n    projectId: \"imss-5c496\",\r\n    storageBucket: \"imss-5c496.appspot.com\",\r\n    messagingSenderId: \"328835117825\",\r\n    appId: \"1:328835117825:web:11d88493504995947ae100\"\r\n  };\r\n  \r\n  firebase.initializeApp(firebaseConfig)\r\n  export const database=firebase.database().ref('/items')","import {ITEMS,SNEAKERS} from './ImactionTypes'\r\nimport {database} from '../../firebase/firebase'\r\nimport 'firebase/firestore'\r\nimport firebase from 'firebase/app'\r\nconst firestore=firebase.firestore()\r\nexport const Items=()=>{\r\n    return dispatch=>{\r\n      \r\n        \r\n            database.on('value',snapshot=>{\r\n             console.log(snapshot.val())\r\n                dispatch({\r\n                type:ITEMS,\r\n                payload:snapshot.val()\r\n            })\r\n        })\r\n        \r\n    }\r\n}\r\n\r\n//inser into cart\r\nexport const setItem=(note)=>{\r\n    return dispatch=>{\r\n        database.push(note)\r\n    }\r\n     }\r\n \r\n     //deleting the item from cart\r\n      export const deleteItem=(id)=>{\r\n         console.log(id)\r\n         return dispatch=>{database.child(`${id}`).remove()}\r\n \r\n     }","import React,{useEffect,useState} from 'react'\r\nimport { BrowserRouter as Router, Switch,Route,Link,Redirect,withRouter} from 'react-router-dom'\r\nimport {connect} from 'react-redux'\r\nimport {Items,setItem,deleteItem} from '../redux/actions/ImActions'\r\n\r\nfunction Homepage({products,...props}) {\r\nconst items={\r\n    id:\"\",\r\n    name:\"\",\r\n    imageUrl:\"\",\r\n    price:\"\",\r\n    cat:\"\"\r\n}\r\nconst[product,setProduct]=useState(items)\r\nuseEffect(()=>{\r\n    \r\nprops.getItems()\r\n\r\n},[])\r\n console.log(products)\r\n let arr=Object.entries(products)\r\n    return (\r\n      \r\n        <div className=\"container text-center\">\r\n        <div className=\"row\">\r\n            <div className='col col-12'>\r\n                <h1 className=\"text-primary\"> SHOP ITEMS</h1>\r\n            </div>\r\n        </div>\r\n        <div className=\"container\">\r\n  <div className=\"row\">\r\n      { \r\n       arr.map(([key,value])=>{\r\n            \r\n            return (\r\n    \r\n    <div key={key} className=\"card\" style={{width:\"16rem\"}}>\r\n    <img className=\"card-img-top\" width=\"100px\" height=\"180px\" src={value.imageUrl} alt={value.name}/>\r\n    <div className=\"card-body\">\r\n  <span className=\"card-title\">Product Name:</span><h4>{value.name}</h4>\r\n  <span className=\"card-test\">price:</span><h4>{value.price}</h4>\r\n    <button className=\"btn btn-primary\">Add To Catr</button>\r\n  </div>\r\n    </div>\r\n          \r\n            )\r\n            \r\n            \r\n       })\r\n      }\r\n </div>\r\n</div>\r\n        </div>\r\n       \r\n    )\r\n}\r\nconst mapStateToProps=(state)=>{\r\n   // console.log(state)\r\n    return{  products:state.Items}\r\n  }\r\n  const mapActionToProps={\r\n      getItems:Items,\r\n        }\r\n  export default connect(mapStateToProps,mapActionToProps)(Homepage)\r\n\r\n\r\n","export const ITEMS='ITEMS'\r\nexport const SNEAKERS='SNEAKERS'","import React from 'react'\r\n\r\nfunction Cart() {\r\n    return (\r\n        <div>\r\n            cart page\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cart\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Homepage from './components/Homepage';\nimport {Switch,Route,withRouter,Link} from 'react-router-dom'\n\n\nimport Hats from './components/Hats';\nimport Sneakers from './components/Sneakers';\nimport Cart from './components/Cart';\nfunction App() {\n  return (\n    <div className=\"App\">\n    <nav className=\"navbar  navbar-expand-lg navbar-dark bg-dark \">\n  <a className=\"navbar-brand\" href=\"/\">IMSS</a>\n  <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n    <span className=\"navbar-toggler-icon\"></span>\n  </button>\n\n  <div className=\"collapse navbar-collapse\">\n  \n    <ul className=\"nav justify-content-center \">\n      <li className=\"nav-item active\">\n        <a className=\"nav-link\" href=\"/\"> SHOP<span className=\"sr-only\">(current)</span></a>\n      </li>\n      <li className=\"nav-item\">\n        <a className=\"nav-link\" href=\"/cart\">CART</a>\n      </li>\n    </ul>\n    \n  </div>\n</nav>\n     <Switch>\n       <Route exact path='/' component={Homepage}/>\n       <Route exact path='/cart' component={Cart}/>\n     </Switch>\n       \n     </div>\n  );\n}\n\nexport default withRouter( App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ITEMS,SNEAKERS } from '../actions/ImactionTypes'\r\n\r\nconst items={}\r\nexport const ImReducer=(state=items,actoin)=>{\r\n  \r\n    switch(actoin.type){\r\n    case ITEMS:\r\n        console.log(actoin.payload)\r\n            return   actoin.payload\r\n     default:\r\n         return state\r\n        \r\n    }\r\n}","import {combineReducers} from 'redux'\r\nimport {ImReducer} from '../reducers/ImReducer'\r\nconst rootReducer=combineReducers({\r\n Items:ImReducer\r\n});\r\nexport default rootReducer","import {createStore,applyMiddleware} from 'redux'\r\nimport thunk from'redux-thunk'\r\nimport rootReducer from './reducers/index'\r\nconst store=createStore(rootReducer,applyMiddleware(thunk))\r\n\r\nexport  default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport {BrowserRouter} from 'react-router-dom'\nimport store from './redux/store'\nimport {Provider} from 'react-redux'\n\nReactDOM.render(\n  <React.StrictMode>\n  <Provider store={store}>\n  <BrowserRouter>\n    <App />\n    </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}